"""Django settings for Dating project.
Generated by 'django-admin startproject' using Django 1.10.
For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#Secret key de produccion
SECRET_KEY = os.environ.get('SECRET_KEY','XST32636732TPO4X95i9XH78')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#Allowed host to prod

ALLOWED_HOSTS = ['chatdatting.us-east-1.elasticbeanstalk.com', # dominio amazon
                 'www.datinglatinos.com',
                 'datinglatinos.com',
                 'localhost',
                 '172.31.16.210',
                 '54.146.164.110'] # IP ec2
# prueba
# Application definition

INSTALLED_APPS = [
    'dateSite.apps.dateSiteConfig',
    'landings.apps.LandingsConfig',
    'manager.apps.ManagerConfig',
    'dateSite.templatetags',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    # The Django sites framework is required
    'django.contrib.sites',
    # The Django authentication
    'allauth',
    'allauth.account',
    # Sass preprocessor
    'sass_processor',
    # PostgreSQL search
    'django.contrib.postgres',
    # Channels
    'channels',
    # autocomplete
    'dal',
    'dal_select2',
    # upload ajax files
    'django_file_form',
    'django_file_form.ajaxuploader',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dating.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.static',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dateSite.context_processor.login_form_processor',
                'dateSite.context_processor.search_form_processor',
                'dateSite.context_processor.feeling_choices_processor',
                'dateSite.context_processor.notifications_processor',
                'dateSite.context_processor.profile_menu_processor',
                'dateSite.context_processor.user_verified_processor',
                'dateSite.context_processor.signup_form_processor',
                'dateSite.context_processor.goodluck_form_processor',
                'dateSite.context_processor.my_chats_processor',
                'dateSite.context_processor.changepass_form_processor',
                'dateSite.context_processor.changepasskey_form_processor',
                'dateSite.context_processor.upload_files_processor',
                'dateSite.context_processor.quantity_profile_processor',
            ],
        },
    },
]


WSGI_APPLICATION = 'dating.wsgi.application'
# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
if os.environ.get("DB_NAME"):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get("DB_NAME"),
            'USER': os.environ.get("DB_USER"),
            'PASSWORD': os.environ.get("DB_PASS"),
            'HOST': os.environ.get("DB_HOST"),
            'PORT': '5432',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'dating',
            'USER': 'siteadmin',
            'PASSWORD': '@dm!n',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Mexico_City'
USE_I18N = True
USE_L10N = True
USE_TZ = True

if os.environ.get("BUCKET_NAME"):
    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/1.10/howto/static-files/
    AWS_HEADERS = {  # see http://developer.yahoo.com/performance/rules.html#expires
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'Cache-Control': 'max-age=94608000',
    }

    AWS_STORAGE_BUCKET_NAME = os.environ.get("BUCKET_NAME")
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    SES_ACCESS_KEY_ID = os.environ.get("SES_ACCESS_KEY_ID")
    SES_SECRET_ACCESS_KEY = os.environ.get("SES_SECRET_ACCESS_KEY")

    # Tell django-storages that when coming up with the URL for an item in S3 storage, keep
    # it simple - just use this domain plus the path. (If this isn't set, things get complicated).
    # This controls how the `static` template tag from `staticfiles` gets expanded, if you're using it.
    # We also use it in the next setting.
    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

    # This is used by the `static` template tag from `static`, if you're using that. Or if anything else
    # refers directly to STATIC_URL. So it's safest to always set it.
    STATICFILES_LOCATION = 'static'
    STATICFILES_STORAGE = 'dating.custom_storages.StaticStorage'
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)

    MEDIAFILES_LOCATION = 'media'
    MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)
    DEFAULT_FILE_STORAGE = 'dating.custom_storages.MediaStorage'
else:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

    MEDIA_URL = "/media/"
    MEDIA_ROOT = 'media'

LOGIN_URL = '/login/'

LOGIN_REDIRECT_URL = '/'  # It means home view

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

#Https
"""
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_EXPIRE_AT_BROWSER_CLOSE=True
"""

SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USER_DISPLAY = lambda user: user.username
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = None
ACCOUNT_ADAPTER = 'dateSite.adapter.AccountAdapter'
ACCOUNT_FORMS = {
    'login': 'dateSite.forms.LoginForm',
    'signup': 'dateSite.forms.SignupForm',
    'reset_password': 'dateSite.forms.ResetPasswordForm',
    'change_password': 'dateSite.forms.ChangePasswordForm',
    'change_password_key': 'dateSite.forms.ResetPasswordKeyForm',
    'add_email': 'dateSite.forms.AddEmailForm'
}

# Sass configuration
SASS_PRECISION = 4
SASS_OUTPUT_STYLE = 'compact'
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'sass_processor.finders.CssFinder',
)
SASS_PROCESSOR_ROOT = STATIC_URL

# Channel settings
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "asgi_redis.RedisChannelLayer",
        "CONFIG": {
            "hosts": [('liveredis.4ug2kh.0001.use1.cache.amazonaws.com',6379)],
        },
        "ROUTING": "dateSite.routing.channel_routing",
    },
}
# TODO: crear una tabla con los password autorizados por manager o un backend
# de autenticación sin contraseña
USERS_PASS = 'eUfUF3KdZS'
